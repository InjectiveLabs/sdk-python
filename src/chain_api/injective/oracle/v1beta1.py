# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: injective/oracle/v1beta1/oracle.proto, injective/oracle/v1beta1/tx.proto, injective/oracle/v1beta1/genesis.proto, injective/oracle/v1beta1/query.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List

import betterproto
import grpclib

from .cosmos.base import v1beta1


class OracleType(betterproto.Enum):
    Unspecified = 0
    Band = 1
    PriceFeed = 2
    Coinbase = 3
    Chainlink = 4
    Razor = 5
    Dia = 6
    API3 = 7
    Uma = 8
    Pyth = 9
    BandIBC = 10


@dataclass
class Params(betterproto.Message):
    pass


@dataclass
class BandPriceState(betterproto.Message):
    symbol: str = betterproto.string_field(1)
    rate: str = betterproto.string_field(2)
    resolve_time: int = betterproto.uint64_field(3)
    request__i_d: int = betterproto.uint64_field(4)
    price_state: "PriceState" = betterproto.message_field(5)


@dataclass
class SetBandPriceEvent(betterproto.Message):
    """Event type upon set ref"""

    relayer: str = betterproto.string_field(1)
    symbol: str = betterproto.string_field(2)
    price: str = betterproto.string_field(3)
    resolve_time: int = betterproto.uint64_field(4)
    request_id: int = betterproto.uint64_field(5)


@dataclass
class SetBandIBCPriceEvent(betterproto.Message):
    relayer: str = betterproto.string_field(1)
    symbol: str = betterproto.string_field(2)
    price: str = betterproto.string_field(3)
    resolve_time: int = betterproto.uint64_field(4)
    request_id: int = betterproto.uint64_field(5)
    client_id: int = betterproto.int64_field(6)


@dataclass
class EventBandIBCAckSuccess(betterproto.Message):
    ack_result: str = betterproto.string_field(1)
    client_id: int = betterproto.int64_field(2)


@dataclass
class EventBandIBCAckError(betterproto.Message):
    ack_error: str = betterproto.string_field(1)
    client_id: int = betterproto.int64_field(2)


@dataclass
class EventBandIBCResponseTimeout(betterproto.Message):
    client_id: int = betterproto.int64_field(1)


@dataclass
class GetReferenceData(betterproto.Message):
    """Event type for getting reference data"""

    base_quote_symbol: str = betterproto.string_field(1)
    base_quote_rate: str = betterproto.string_field(2)
    last_update_base: str = betterproto.string_field(3)
    last_update_quote: str = betterproto.string_field(4)


@dataclass
class GrantBandOraclePrivilegeProposal(betterproto.Message):
    title: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    relayers: List[str] = betterproto.string_field(3)


@dataclass
class RevokeBandOraclePrivilegeProposal(betterproto.Message):
    title: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    relayers: List[str] = betterproto.string_field(3)


@dataclass
class GrantPriceFeederPrivilegeProposal(betterproto.Message):
    title: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    base: str = betterproto.string_field(3)
    quote: str = betterproto.string_field(4)
    relayers: List[str] = betterproto.string_field(5)


@dataclass
class RevokePriceFeederPrivilegeProposal(betterproto.Message):
    title: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    base: str = betterproto.string_field(3)
    quote: str = betterproto.string_field(4)
    relayers: List[str] = betterproto.string_field(5)


@dataclass
class PriceFeedState(betterproto.Message):
    base: str = betterproto.string_field(1)
    quote: str = betterproto.string_field(2)
    price_state: "PriceState" = betterproto.message_field(3)
    relayers: List[str] = betterproto.string_field(4)


@dataclass
class PriceFeedInfo(betterproto.Message):
    base: str = betterproto.string_field(1)
    quote: str = betterproto.string_field(2)


@dataclass
class PriceFeedPrice(betterproto.Message):
    price: str = betterproto.string_field(1)


@dataclass
class SetPriceFeedPriceEvent(betterproto.Message):
    relayer: str = betterproto.string_field(1)
    base: str = betterproto.string_field(2)
    quote: str = betterproto.string_field(3)
    # price defines the price of the oracle base and quote
    price: str = betterproto.string_field(4)


@dataclass
class CoinbasePriceState(betterproto.Message):
    # kind should always be "prices"
    kind: str = betterproto.string_field(1)
    # timestamp of the when the price was signed by coinbase
    timestamp: int = betterproto.uint64_field(2)
    # the symbol of the price, e.g. BTC
    key: str = betterproto.string_field(3)
    # the value of the price scaled by 1e6
    value: int = betterproto.uint64_field(4)
    # the price state
    price_state: "PriceState" = betterproto.message_field(5)


@dataclass
class SetCoinbasePriceEvent(betterproto.Message):
    symbol: str = betterproto.string_field(1)
    price: str = betterproto.string_field(2)
    timestamp: int = betterproto.uint64_field(3)


@dataclass
class PriceState(betterproto.Message):
    price: str = betterproto.string_field(1)
    cumulative_price: str = betterproto.string_field(2)
    timestamp: int = betterproto.int64_field(3)


@dataclass
class AuthorizeBandOracleRequestProposal(betterproto.Message):
    title: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    request: "BandOracleRequest" = betterproto.message_field(3)


@dataclass
class UpdateBandOracleRequestProposal(betterproto.Message):
    title: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    delete_request_id: int = betterproto.uint64_field(3)
    update_oracle_request: "BandOracleRequest" = betterproto.message_field(4)


@dataclass
class EnableBandIBCProposal(betterproto.Message):
    title: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    band_ibc_params: "BandIBCParams" = betterproto.message_field(3)


@dataclass
class BandOracleRequest(betterproto.Message):
    # Unique Identifier for band ibc oracle request
    request_id: int = betterproto.uint64_field(1)
    # OracleScriptID is the unique identifier of the oracle script to be
    # executed.
    oracle_script_id: int = betterproto.int64_field(2)
    # Symbols is the list of symbols to prepare in the calldata
    symbols: List[str] = betterproto.string_field(3)
    # AskCount is the number of validators that are requested to respond to this
    # oracle request. Higher value means more security, at a higher gas cost.
    ask_count: int = betterproto.uint64_field(4)
    # MinCount is the minimum number of validators necessary for the request to
    # proceed to the execution phase. Higher value means more security, at the
    # cost of liveness.
    min_count: int = betterproto.uint64_field(5)
    # FeeLimit is the maximum tokens that will be paid to all data source
    # providers.
    fee_limit: List[v1beta1.Coin] = betterproto.message_field(6)
    # RequestKey is the key from request chain to match data source fee payer on
    # Bandchain The key from the request chain which identifies the pool account
    # on Bandchain to process data source fee
    request_key: str = betterproto.string_field(7)
    # PrepareGas is amount of gas to pay to prepare raw requests
    prepare_gas: int = betterproto.uint64_field(8)
    # ExecuteGas is amount of gas to reserve for executing
    execute_gas: int = betterproto.uint64_field(9)


@dataclass
class BandIBCParams(betterproto.Message):
    # true if Band IBC should be enabled
    band_ibc_enabled: bool = betterproto.bool_field(1)
    # block request interval to send Band IBC prices
    ibc_request_interval: int = betterproto.int64_field(2)
    # band IBC source channel
    ibc_source_channel: str = betterproto.string_field(3)
    # band IBC version
    ibc_version: str = betterproto.string_field(4)
    # band IBC portID
    ibc_port_id: str = betterproto.string_field(5)


@dataclass
class MsgRelayPriceFeedPrice(betterproto.Message):
    """
    MsgRelayPriceFeedPrice defines a SDK message for setting a price through
    the pricefeed oracle.
    """

    sender: str = betterproto.string_field(1)
    base: List[str] = betterproto.string_field(2)
    quote: List[str] = betterproto.string_field(3)
    # price defines the price of the oracle base and quote
    price: List[str] = betterproto.string_field(4)


@dataclass
class MsgRelayPriceFeedPriceResponse(betterproto.Message):
    pass


@dataclass
class MsgRelayBandRates(betterproto.Message):
    relayer: str = betterproto.string_field(1)
    symbols: List[str] = betterproto.string_field(2)
    rates: List[int] = betterproto.uint64_field(3)
    resolve_times: List[int] = betterproto.uint64_field(4)
    request_i_ds: List[int] = betterproto.uint64_field(5)


@dataclass
class MsgRelayBandRatesResponse(betterproto.Message):
    pass


@dataclass
class MsgRelayCoinbaseMessages(betterproto.Message):
    """
    MsgRelayCoinbaseMessages defines a SDK message for relaying price messages
    from Coinbase API.
    """

    sender: str = betterproto.string_field(1)
    messages: List[bytes] = betterproto.bytes_field(2)
    signatures: List[bytes] = betterproto.bytes_field(3)


@dataclass
class MsgRelayCoinbaseMessagesResponse(betterproto.Message):
    pass


@dataclass
class MsgRequestBandIBCRates(betterproto.Message):
    """
    MsgRequestBandIBCRates defines a SDK message for requesting data from
    BandChain using IBC.
    """

    sender: str = betterproto.string_field(1)
    request_id: int = betterproto.uint64_field(2)
    request_key: str = betterproto.string_field(3)


@dataclass
class MsgRequestBandIBCRatesResponse(betterproto.Message):
    """
    MsgRequestDataResponse defines the Msg/RequestBandIBCRates response type.
    """

    pass


@dataclass
class GenesisState(betterproto.Message):
    """GenesisState defines the oracle module's genesis state."""

    # params defines all the parameters of related to oracle.
    params: "Params" = betterproto.message_field(1)
    band_relayers: List[str] = betterproto.string_field(2)
    band_price_states: List["BandPriceState"] = betterproto.message_field(3)
    price_feed_price_states: List["PriceFeedState"] = betterproto.message_field(4)
    coinbase_price_states: List["CoinbasePriceState"] = betterproto.message_field(5)
    band_ibc_price_states: List["BandPriceState"] = betterproto.message_field(6)
    band_ibc_oracle_requests: List["BandOracleRequest"] = betterproto.message_field(7)
    band_ibc_params: "BandIBCParams" = betterproto.message_field(8)
    band_ibc_latest_client_id: int = betterproto.uint64_field(9)
    calldata_records: List["CalldataRecord"] = betterproto.message_field(10)
    band_ibc_latest_request_id: int = betterproto.uint64_field(11)


@dataclass
class CalldataRecord(betterproto.Message):
    client_id: int = betterproto.uint64_field(1)
    calldata: bytes = betterproto.bytes_field(2)


@dataclass
class QueryParamsRequest(betterproto.Message):
    """
    QueryOracleParamsRequest is the request type for the Query/OracleParams RPC
    method.
    """

    pass


@dataclass
class QueryParamsResponse(betterproto.Message):
    """
    QueryOracleParamsResponse is the response type for the Query/OracleParams
    RPC method.
    """

    params: "Params" = betterproto.message_field(1)


@dataclass
class QueryBandRelayersRequest(betterproto.Message):
    """
    QueryBandRelayersRequest is the request type for the Query/BandRelayers RPC
    method.
    """

    pass


@dataclass
class QueryBandRelayersResponse(betterproto.Message):
    """
    QueryBandRelayersResponse is the response type for the Query/BandRelayers
    RPC method.
    """

    relayers: List[str] = betterproto.string_field(1)


@dataclass
class QueryBandPriceStatesRequest(betterproto.Message):
    """
    QueryBandPriceStatesRequest is the request type for the
    Query/BandPriceStates RPC method.
    """

    pass


@dataclass
class QueryBandPriceStatesResponse(betterproto.Message):
    """
    QueryBandPriceStatesResponse is the response type for the
    Query/BandPriceStates RPC method.
    """

    price_states: List["BandPriceState"] = betterproto.message_field(1)


@dataclass
class QueryBandIBCPriceStatesRequest(betterproto.Message):
    """
    QueryBandIBCPriceStatesRequest is the request type for the
    Query/BandIBCPriceStates RPC method.
    """

    pass


@dataclass
class QueryBandIBCPriceStatesResponse(betterproto.Message):
    """
    QueryBandIBCPriceStatesResponse is the response type for the
    Query/BandIBCPriceStates RPC method.
    """

    price_states: List["BandPriceState"] = betterproto.message_field(1)


@dataclass
class QueryPriceFeedPriceStatesRequest(betterproto.Message):
    """
    QueryPriceFeedPriceStatesRequest is the request type for the
    Query/PriceFeedPriceStates RPC method.
    """

    pass


@dataclass
class QueryPriceFeedPriceStatesResponse(betterproto.Message):
    """
    QueryPriceFeedPriceStatesResponse is the response type for the
    Query/PriceFeedPriceStates RPC method.
    """

    price_states: List["PriceFeedState"] = betterproto.message_field(1)


@dataclass
class QueryCoinbasePriceStatesRequest(betterproto.Message):
    """
    QueryCoinbasePriceStatesRequest is the request type for the
    Query/CoinbasePriceStates RPC method.
    """

    pass


@dataclass
class QueryCoinbasePriceStatesResponse(betterproto.Message):
    """
    QueryCoinbasePriceStatesResponse is the response type for the
    Query/CoinbasePriceStates RPC method.
    """

    price_states: List["CoinbasePriceState"] = betterproto.message_field(1)


@dataclass
class QueryModuleStateRequest(betterproto.Message):
    """
    QueryModuleStateRequest is the request type for the Query/OracleModuleState
    RPC method.
    """

    pass


@dataclass
class QueryModuleStateResponse(betterproto.Message):
    """
    QueryModuleStateResponse is the response type for the
    Query/OracleModuleState RPC method.
    """

    state: "GenesisState" = betterproto.message_field(1)


class MsgStub(betterproto.ServiceStub):
    """Msg defines the oracle Msg service."""

    async def relay_price_feed_price(
        self,
        *,
        sender: str = "",
        base: List[str] = [],
        quote: List[str] = [],
        price: List[str] = [],
    ) -> MsgRelayPriceFeedPriceResponse:
        """
        RelayPriceFeedPrice defines a method for relaying a price for a price
        feeder-based oracle
        """

        request = MsgRelayPriceFeedPrice()
        request.sender = sender
        request.base = base
        request.quote = quote
        request.price = price

        return await self._unary_unary(
            "/injective.oracle.v1beta1.Msg/RelayPriceFeedPrice",
            request,
            MsgRelayPriceFeedPriceResponse,
        )

    async def relay_band_rates(
        self,
        *,
        relayer: str = "",
        symbols: List[str] = [],
        rates: List[int] = [],
        resolve_times: List[int] = [],
        request_i_ds: List[int] = [],
    ) -> MsgRelayBandRatesResponse:
        """RelayBandRates defines a method for relaying rates from Band"""

        request = MsgRelayBandRates()
        request.relayer = relayer
        request.symbols = symbols
        request.rates = rates
        request.resolve_times = resolve_times
        request.request_i_ds = request_i_ds

        return await self._unary_unary(
            "/injective.oracle.v1beta1.Msg/RelayBandRates",
            request,
            MsgRelayBandRatesResponse,
        )

    async def request_band_i_b_c_rates(
        self, *, sender: str = "", request_id: int = 0, request_key: str = ""
    ) -> MsgRequestBandIBCRatesResponse:
        """
        RequestBandIBCRates defines a method for fetching rates from Band ibc
        """

        request = MsgRequestBandIBCRates()
        request.sender = sender
        request.request_id = request_id
        request.request_key = request_key

        return await self._unary_unary(
            "/injective.oracle.v1beta1.Msg/RequestBandIBCRates",
            request,
            MsgRequestBandIBCRatesResponse,
        )

    async def relay_coinbase_messages(
        self,
        *,
        sender: str = "",
        messages: List[bytes] = [],
        signatures: List[bytes] = [],
    ) -> MsgRelayCoinbaseMessagesResponse:
        """
        RelayCoinbaseMessages defines a method for relaying price messages from
        Coinbase API
        """

        request = MsgRelayCoinbaseMessages()
        request.sender = sender
        request.messages = messages
        request.signatures = signatures

        return await self._unary_unary(
            "/injective.oracle.v1beta1.Msg/RelayCoinbaseMessages",
            request,
            MsgRelayCoinbaseMessagesResponse,
        )


class QueryStub(betterproto.ServiceStub):
    """Query defines the gRPC querier service."""

    async def params(self) -> QueryParamsResponse:
        """Retrieves oracle params"""

        request = QueryParamsRequest()

        return await self._unary_unary(
            "/injective.oracle.v1beta1.Query/Params",
            request,
            QueryParamsResponse,
        )

    async def band_relayers(self) -> QueryBandRelayersResponse:
        """Retrieves the band relayers"""

        request = QueryBandRelayersRequest()

        return await self._unary_unary(
            "/injective.oracle.v1beta1.Query/BandRelayers",
            request,
            QueryBandRelayersResponse,
        )

    async def band_price_states(self) -> QueryBandPriceStatesResponse:
        """Retrieves the state for all band price feeds"""

        request = QueryBandPriceStatesRequest()

        return await self._unary_unary(
            "/injective.oracle.v1beta1.Query/BandPriceStates",
            request,
            QueryBandPriceStatesResponse,
        )

    async def band_i_b_c_price_states(self) -> QueryBandIBCPriceStatesResponse:
        """Retrieves the state for all band ibc price feeds"""

        request = QueryBandIBCPriceStatesRequest()

        return await self._unary_unary(
            "/injective.oracle.v1beta1.Query/BandIBCPriceStates",
            request,
            QueryBandIBCPriceStatesResponse,
        )

    async def price_feed_price_states(self) -> QueryPriceFeedPriceStatesResponse:
        """Retrieves the state for all price feeds"""

        request = QueryPriceFeedPriceStatesRequest()

        return await self._unary_unary(
            "/injective.oracle.v1beta1.Query/PriceFeedPriceStates",
            request,
            QueryPriceFeedPriceStatesResponse,
        )

    async def coinbase_price_states(self) -> QueryCoinbasePriceStatesResponse:
        """Retrieves the state for all coinbase price feeds"""

        request = QueryCoinbasePriceStatesRequest()

        return await self._unary_unary(
            "/injective.oracle.v1beta1.Query/CoinbasePriceStates",
            request,
            QueryCoinbasePriceStatesResponse,
        )

    async def oracle_module_state(self) -> QueryModuleStateResponse:
        """Retrieves the entire oracle module's state"""

        request = QueryModuleStateRequest()

        return await self._unary_unary(
            "/injective.oracle.v1beta1.Query/OracleModuleState",
            request,
            QueryModuleStateResponse,
        )
