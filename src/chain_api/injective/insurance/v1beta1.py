# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: injective/insurance/v1beta1/insurance.proto, injective/insurance/v1beta1/tx.proto, injective/insurance/v1beta1/genesis.proto, injective/insurance/v1beta1/query.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime, timedelta
from typing import List, Optional

import betterproto
import grpclib

from .cosmos.base import v1beta1
from .injective.oracle import v1beta1


@dataclass
class Params(betterproto.Message):
    # default_redemption_notice_period_duration defines the default minimum
    # notice period duration that must pass after an underwriter sends a
    # redemption request before the underwriter can claim his tokens
    default_redemption_notice_period_duration: timedelta = betterproto.message_field(1)


@dataclass
class InsuranceFund(betterproto.Message):
    # deposit denomination for the given insurance fund
    deposit_denom: str = betterproto.string_field(1)
    # insurance fund pool token denomination for the given insurance fund
    insurance_pool_token_denom: str = betterproto.string_field(2)
    # redemption_notice_period_duration defines the minimum notice period
    # duration that must pass after an underwriter sends a redemption request
    # before the underwriter can claim his tokens
    redemption_notice_period_duration: timedelta = betterproto.message_field(3)
    # balance of fund
    balance: str = betterproto.string_field(4)
    # total share tokens minted
    total_share: str = betterproto.string_field(5)
    # marketID of the derivative market
    market_id: str = betterproto.string_field(6)
    # ticker of the derivative market
    market_ticker: str = betterproto.string_field(7)
    # Oracle base currency of the derivative market
    oracle_base: str = betterproto.string_field(8)
    # Oracle quote currency of the derivative market
    oracle_quote: str = betterproto.string_field(9)
    # Oracle type of the derivative market
    oracle_type: v1beta1.OracleType = betterproto.enum_field(10)
    # Expiration time of the derivative market. Should be -1 for perpetual
    # markets.
    expiry: int = betterproto.int64_field(11)


@dataclass
class RedemptionSchedule(betterproto.Message):
    # id of redemption schedule
    id: int = betterproto.uint64_field(1)
    # marketId of insurance fund for the redemption
    market_id: str = betterproto.string_field(2)
    # address of the redeemer
    redeemer: str = betterproto.string_field(3)
    # the time after which the redemption can be claimed
    claimable_redemption_time: datetime = betterproto.message_field(4)
    # the insurance_pool_token amount to redeem
    redemption_amount: v1beta1.Coin = betterproto.message_field(5)


@dataclass
class EventInsuranceFundUpdate(betterproto.Message):
    fund: "InsuranceFund" = betterproto.message_field(1)


@dataclass
class EventRequestRedemption(betterproto.Message):
    schedule: "RedemptionSchedule" = betterproto.message_field(1)


@dataclass
class EventWithdrawRedemption(betterproto.Message):
    # redemption schedule triggered withdraw
    schedule: "RedemptionSchedule" = betterproto.message_field(1)
    # redeem coin amount in base_currency
    redeem_coin: v1beta1.Coin = betterproto.message_field(2)


@dataclass
class MsgCreateInsuranceFund(betterproto.Message):
    """
    MsgCreateInsuranceFund a message to create an insurance fund for a
    derivative market.
    """

    # Creator of the insurance fund.
    sender: str = betterproto.string_field(1)
    # Ticker for the derivative market.
    ticker: str = betterproto.string_field(2)
    # Coin denom to use for the market quote denom
    quote_denom: str = betterproto.string_field(3)
    # Oracle base currency
    oracle_base: str = betterproto.string_field(4)
    # Oracle quote currency
    oracle_quote: str = betterproto.string_field(5)
    # Oracle type
    oracle_type: v1beta1.OracleType = betterproto.enum_field(6)
    # Expiration time of the market. Should be -1 for perpetual markets.
    expiry: int = betterproto.int64_field(7)
    # Initial deposit of the insurance fund
    initial_deposit: v1beta1.Coin = betterproto.message_field(8)


@dataclass
class MsgCreateInsuranceFundResponse(betterproto.Message):
    pass


@dataclass
class MsgUnderwrite(betterproto.Message):
    """
    MsgUnderwrite defines a message for depositing coins to underwrite an
    insurance fund
    """

    # Address of the underwriter.
    sender: str = betterproto.string_field(1)
    # MarketID of the insurance fund.
    market_id: str = betterproto.string_field(2)
    # Amount of quote_denom to underwrite the insurance fund.
    deposit: v1beta1.Coin = betterproto.message_field(3)


@dataclass
class MsgUnderwriteResponse(betterproto.Message):
    pass


@dataclass
class MsgRequestRedemption(betterproto.Message):
    """
    MsgRequestRedemption defines a message for requesting a redemption of the
    sender's insurance fund tokens
    """

    # Address of the underwriter requesting a redemption.
    sender: str = betterproto.string_field(1)
    # MarketID of the insurance fund.
    market_id: str = betterproto.string_field(2)
    # Insurance fund share token amount to be redeemed.
    amount: v1beta1.Coin = betterproto.message_field(3)


@dataclass
class MsgRequestRedemptionResponse(betterproto.Message):
    pass


@dataclass
class GenesisState(betterproto.Message):
    """GenesisState defines the insurance module's genesis state."""

    # params defines all the parameters of related to insurance.
    params: "Params" = betterproto.message_field(1)
    insurance_funds: List["InsuranceFund"] = betterproto.message_field(2)
    redemption_schedule: List["RedemptionSchedule"] = betterproto.message_field(3)
    next_share_denom_id: int = betterproto.uint64_field(4)
    next_redemption_schedule_id: int = betterproto.uint64_field(5)


@dataclass
class QueryInsuranceParamsRequest(betterproto.Message):
    """
    QueryInsuranceParamsRequest is the request type for the
    Query/InsuranceParams RPC method.
    """

    pass


@dataclass
class QueryInsuranceParamsResponse(betterproto.Message):
    """
    QueryInsuranceParamsRequest is the response type for the
    Query/InsuranceParams RPC method.
    """

    params: "Params" = betterproto.message_field(1)


@dataclass
class QueryInsuranceFundRequest(betterproto.Message):
    """
    QueryInsuranceFundRequest is the request type for the Query/InsuranceFunds
    RPC method.
    """

    # Market ID for the market
    market_id: str = betterproto.string_field(1)


@dataclass
class QueryInsuranceFundResponse(betterproto.Message):
    """
    QueryInsuranceFundResponse is the response type for the Query/InsuranceFund
    RPC method.
    """

    fund: "InsuranceFund" = betterproto.message_field(1)


@dataclass
class QueryInsuranceFundsRequest(betterproto.Message):
    """
    QueryInsuranceFundsRequest is the request type for the Query/InsuranceFunds
    RPC method.
    """

    pass


@dataclass
class QueryInsuranceFundsResponse(betterproto.Message):
    """
    QueryInsuranceFundsResponse is the response type for the
    Query/InsuranceFunds RPC method.
    """

    funds: List["InsuranceFund"] = betterproto.message_field(1)


@dataclass
class QueryEstimatedRedemptionsRequest(betterproto.Message):
    """
    QueryEstimatedRedemptionsRequest is the request type for the
    Query/EstimatedRedemptions RPC method.
    """

    market_id: str = betterproto.string_field(1)
    address: str = betterproto.string_field(2)


@dataclass
class QueryEstimatedRedemptionsResponse(betterproto.Message):
    """
    QueryEstimatedRedemptionsResponse is the response type for the
    Query/EstimatedRedemptions RPC method.
    """

    amount: List[v1beta1.Coin] = betterproto.message_field(1)


@dataclass
class QueryPendingRedemptionsRequest(betterproto.Message):
    """
    QueryPendingRedemptionsRequest is the request type for the
    Query/PendingRedemptions RPC method.
    """

    market_id: str = betterproto.string_field(1)
    address: str = betterproto.string_field(2)


@dataclass
class QueryPendingRedemptionsResponse(betterproto.Message):
    """
    QueryPendingRedemptionsResponse is the response type for the
    Query/PendingRedemptions RPC method.
    """

    amount: List[v1beta1.Coin] = betterproto.message_field(1)


@dataclass
class QueryModuleStateRequest(betterproto.Message):
    """
    QueryModuleStateRequest is the request type for the
    Query/InsuranceModuleState RPC method.
    """

    pass


@dataclass
class QueryModuleStateResponse(betterproto.Message):
    """
    QueryModuleStateResponse is the response type for the
    Query/InsuranceModuleState RPC method.
    """

    state: "GenesisState" = betterproto.message_field(1)


class MsgStub(betterproto.ServiceStub):
    """Msg defines the insurance Msg service."""

    async def create_insurance_fund(
        self,
        *,
        sender: str = "",
        ticker: str = "",
        quote_denom: str = "",
        oracle_base: str = "",
        oracle_quote: str = "",
        oracle_type: v1beta1.OracleType = 0,
        expiry: int = 0,
        initial_deposit: Optional[v1beta1.Coin] = None,
    ) -> MsgCreateInsuranceFundResponse:
        """
        CreateInsuranceFund defines a method for creating an insurance fund
        """

        request = MsgCreateInsuranceFund()
        request.sender = sender
        request.ticker = ticker
        request.quote_denom = quote_denom
        request.oracle_base = oracle_base
        request.oracle_quote = oracle_quote
        request.oracle_type = oracle_type
        request.expiry = expiry
        if initial_deposit is not None:
            request.initial_deposit = initial_deposit

        return await self._unary_unary(
            "/injective.insurance.v1beta1.Msg/CreateInsuranceFund",
            request,
            MsgCreateInsuranceFundResponse,
        )

    async def underwrite(
        self,
        *,
        sender: str = "",
        market_id: str = "",
        deposit: Optional[v1beta1.Coin] = None,
    ) -> MsgUnderwriteResponse:
        """
        Underwrite defines a method for depositing tokens to underwrite an
        insurance fund
        """

        request = MsgUnderwrite()
        request.sender = sender
        request.market_id = market_id
        if deposit is not None:
            request.deposit = deposit

        return await self._unary_unary(
            "/injective.insurance.v1beta1.Msg/Underwrite",
            request,
            MsgUnderwriteResponse,
        )

    async def request_redemption(
        self,
        *,
        sender: str = "",
        market_id: str = "",
        amount: Optional[v1beta1.Coin] = None,
    ) -> MsgRequestRedemptionResponse:
        """
        RequestRedemption defines a method for requesting a redemption of the
        sender's insurance fund tokens
        """

        request = MsgRequestRedemption()
        request.sender = sender
        request.market_id = market_id
        if amount is not None:
            request.amount = amount

        return await self._unary_unary(
            "/injective.insurance.v1beta1.Msg/RequestRedemption",
            request,
            MsgRequestRedemptionResponse,
        )


class QueryStub(betterproto.ServiceStub):
    """Query defines the gRPC querier service."""

    async def insurance_params(self) -> QueryInsuranceParamsResponse:
        """Retrieves insurance params"""

        request = QueryInsuranceParamsRequest()

        return await self._unary_unary(
            "/injective.insurance.v1beta1.Query/InsuranceParams",
            request,
            QueryInsuranceParamsResponse,
        )

    async def insurance_fund(
        self, *, market_id: str = ""
    ) -> QueryInsuranceFundResponse:
        request = QueryInsuranceFundRequest()
        request.market_id = market_id

        return await self._unary_unary(
            "/injective.insurance.v1beta1.Query/InsuranceFund",
            request,
            QueryInsuranceFundResponse,
        )

    async def insurance_funds(self) -> QueryInsuranceFundsResponse:
        request = QueryInsuranceFundsRequest()

        return await self._unary_unary(
            "/injective.insurance.v1beta1.Query/InsuranceFunds",
            request,
            QueryInsuranceFundsResponse,
        )

    async def estimated_redemptions(
        self, *, market_id: str = "", address: str = ""
    ) -> QueryEstimatedRedemptionsResponse:
        request = QueryEstimatedRedemptionsRequest()
        request.market_id = market_id
        request.address = address

        return await self._unary_unary(
            "/injective.insurance.v1beta1.Query/EstimatedRedemptions",
            request,
            QueryEstimatedRedemptionsResponse,
        )

    async def pending_redemptions(
        self, *, market_id: str = "", address: str = ""
    ) -> QueryPendingRedemptionsResponse:
        request = QueryPendingRedemptionsRequest()
        request.market_id = market_id
        request.address = address

        return await self._unary_unary(
            "/injective.insurance.v1beta1.Query/PendingRedemptions",
            request,
            QueryPendingRedemptionsResponse,
        )

    async def insurance_module_state(self) -> QueryModuleStateResponse:
        """Retrieves the entire insurance module's state"""

        request = QueryModuleStateRequest()

        return await self._unary_unary(
            "/injective.insurance.v1beta1.Query/InsuranceModuleState",
            request,
            QueryModuleStateResponse,
        )
