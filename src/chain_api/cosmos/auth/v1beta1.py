# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/auth/v1beta1/auth.proto, cosmos/auth/v1beta1/query.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List, Optional

import betterproto
import grpclib

from .cosmos.base.query import v1beta1
from .google import protobuf


@dataclass
class BaseAccount(betterproto.Message):
    """
    BaseAccount defines a base account type. It contains all the necessary
    fields for basic account functionality. Any custom account type should
    extend this type for additional functionality (e.g. vesting).
    """

    address: str = betterproto.string_field(1)
    pub_key: protobuf.Any = betterproto.message_field(2)
    account_number: int = betterproto.uint64_field(3)
    sequence: int = betterproto.uint64_field(4)


@dataclass
class ModuleAccount(betterproto.Message):
    """
    ModuleAccount defines an account for modules that holds coins on a pool.
    """

    base_account: "BaseAccount" = betterproto.message_field(1)
    name: str = betterproto.string_field(2)
    permissions: List[str] = betterproto.string_field(3)


@dataclass
class Params(betterproto.Message):
    """Params defines the parameters for the auth module."""

    max_memo_characters: int = betterproto.uint64_field(1)
    tx_sig_limit: int = betterproto.uint64_field(2)
    tx_size_cost_per_byte: int = betterproto.uint64_field(3)
    sig_verify_cost_ed25519: int = betterproto.uint64_field(4)
    sig_verify_cost_secp256k1: int = betterproto.uint64_field(5)


@dataclass
class QueryAccountsRequest(betterproto.Message):
    """
    QueryAccountsRequest is the request type for the Query/Accounts RPC method.
    """

    # pagination defines an optional pagination for the request.
    pagination: v1beta1.PageRequest = betterproto.message_field(1)


@dataclass
class QueryAccountsResponse(betterproto.Message):
    """
    QueryAccountsResponse is the response type for the Query/Accounts RPC
    method.
    """

    # accounts are the existing accounts
    accounts: List[protobuf.Any] = betterproto.message_field(1)
    # pagination defines the pagination in the response.
    pagination: v1beta1.PageResponse = betterproto.message_field(2)


@dataclass
class QueryAccountRequest(betterproto.Message):
    """
    QueryAccountRequest is the request type for the Query/Account RPC method.
    """

    # address defines the address to query for.
    address: str = betterproto.string_field(1)


@dataclass
class QueryAccountResponse(betterproto.Message):
    """
    QueryAccountResponse is the response type for the Query/Account RPC method.
    """

    # account defines the account of the corresponding address.
    account: protobuf.Any = betterproto.message_field(1)


@dataclass
class QueryParamsRequest(betterproto.Message):
    """
    QueryParamsRequest is the request type for the Query/Params RPC method.
    """

    pass


@dataclass
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is the response type for the Query/Params RPC method.
    """

    # params defines the parameters of the module.
    params: "Params" = betterproto.message_field(1)


class QueryStub(betterproto.ServiceStub):
    """Query defines the gRPC querier service."""

    async def accounts(
        self, *, pagination: Optional[v1beta1.PageRequest] = None
    ) -> QueryAccountsResponse:
        """Accounts returns all the existing accounts"""

        request = QueryAccountsRequest()
        if pagination is not None:
            request.pagination = pagination

        return await self._unary_unary(
            "/cosmos.auth.v1beta1.Query/Accounts",
            request,
            QueryAccountsResponse,
        )

    async def account(self, *, address: str = "") -> QueryAccountResponse:
        """Account returns account details based on address."""

        request = QueryAccountRequest()
        request.address = address

        return await self._unary_unary(
            "/cosmos.auth.v1beta1.Query/Account",
            request,
            QueryAccountResponse,
        )

    async def params(self) -> QueryParamsResponse:
        """Params queries all parameters."""

        request = QueryParamsRequest()

        return await self._unary_unary(
            "/cosmos.auth.v1beta1.Query/Params",
            request,
            QueryParamsResponse,
        )
