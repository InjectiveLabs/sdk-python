# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/gov/v1beta1/gov.proto, cosmos/gov/v1beta1/tx.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime, timedelta
from typing import List, Optional

import betterproto
import grpclib

from .cosmos.base import v1beta1
from .google import protobuf


class VoteOption(betterproto.Enum):
    """
    VoteOption enumerates the valid vote options for a given governance
    proposal.
    """

    # VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
    VOTE_OPTION_UNSPECIFIED = 0
    # VOTE_OPTION_YES defines a yes vote option.
    VOTE_OPTION_YES = 1
    # VOTE_OPTION_ABSTAIN defines an abstain vote option.
    VOTE_OPTION_ABSTAIN = 2
    # VOTE_OPTION_NO defines a no vote option.
    VOTE_OPTION_NO = 3
    # VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
    VOTE_OPTION_NO_WITH_VETO = 4


class ProposalStatus(betterproto.Enum):
    """ProposalStatus enumerates the valid statuses of a proposal."""

    # PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
    PROPOSAL_STATUS_UNSPECIFIED = 0
    # PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
    # period.
    PROPOSAL_STATUS_DEPOSIT_PERIOD = 1
    # PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
    # period.
    PROPOSAL_STATUS_VOTING_PERIOD = 2
    # PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
    # passed.
    PROPOSAL_STATUS_PASSED = 3
    # PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
    # been rejected.
    PROPOSAL_STATUS_REJECTED = 4
    # PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
    # failed.
    PROPOSAL_STATUS_FAILED = 5


@dataclass
class WeightedVoteOption(betterproto.Message):
    """WeightedVoteOption defines a unit of vote for vote split."""

    option: "VoteOption" = betterproto.enum_field(1)
    weight: str = betterproto.string_field(2)


@dataclass
class TextProposal(betterproto.Message):
    """
    TextProposal defines a standard text proposal whose changes need to be
    manually updated in case of approval.
    """

    title: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)


@dataclass
class Deposit(betterproto.Message):
    """
    Deposit defines an amount deposited by an account address to an active
    proposal.
    """

    proposal_id: int = betterproto.uint64_field(1)
    depositor: str = betterproto.string_field(2)
    amount: List[v1beta1.Coin] = betterproto.message_field(3)


@dataclass
class Proposal(betterproto.Message):
    """Proposal defines the core field members of a governance proposal."""

    proposal_id: int = betterproto.uint64_field(1)
    content: protobuf.Any = betterproto.message_field(2)
    status: "ProposalStatus" = betterproto.enum_field(3)
    final_tally_result: "TallyResult" = betterproto.message_field(4)
    submit_time: datetime = betterproto.message_field(5)
    deposit_end_time: datetime = betterproto.message_field(6)
    total_deposit: List[v1beta1.Coin] = betterproto.message_field(7)
    voting_start_time: datetime = betterproto.message_field(8)
    voting_end_time: datetime = betterproto.message_field(9)


@dataclass
class TallyResult(betterproto.Message):
    """TallyResult defines a standard tally for a governance proposal."""

    yes: str = betterproto.string_field(1)
    abstain: str = betterproto.string_field(2)
    no: str = betterproto.string_field(3)
    no_with_veto: str = betterproto.string_field(4)


@dataclass
class Vote(betterproto.Message):
    """
    Vote defines a vote on a governance proposal. A Vote consists of a proposal
    ID, the voter, and the vote option.
    """

    proposal_id: int = betterproto.uint64_field(1)
    voter: str = betterproto.string_field(2)
    # Deprecated: Prefer to use `options` instead. This field is set in queries
    # if and only if `len(options) == 1` and that option has weight 1. In all
    # other cases, this field will default to VOTE_OPTION_UNSPECIFIED.
    option: "VoteOption" = betterproto.enum_field(3)
    options: List["WeightedVoteOption"] = betterproto.message_field(4)


@dataclass
class DepositParams(betterproto.Message):
    """
    DepositParams defines the params for deposits on governance proposals.
    """

    # Minimum deposit for a proposal to enter voting period.
    min_deposit: List[v1beta1.Coin] = betterproto.message_field(1)
    # Maximum period for Atom holders to deposit on a proposal. Initial value: 2
    # months.
    max_deposit_period: timedelta = betterproto.message_field(2)


@dataclass
class VotingParams(betterproto.Message):
    """VotingParams defines the params for voting on governance proposals."""

    # Length of the voting period.
    voting_period: timedelta = betterproto.message_field(1)


@dataclass
class TallyParams(betterproto.Message):
    """
    TallyParams defines the params for tallying votes on governance proposals.
    """

    # Minimum percentage of total stake needed to vote for a result to be
    # considered valid.
    quorum: bytes = betterproto.bytes_field(1)
    # Minimum proportion of Yes votes for proposal to pass. Default value: 0.5.
    threshold: bytes = betterproto.bytes_field(2)
    # Minimum value of Veto votes to Total votes ratio for proposal to be
    # vetoed. Default value: 1/3.
    veto_threshold: bytes = betterproto.bytes_field(3)


@dataclass
class MsgSubmitProposal(betterproto.Message):
    """
    MsgSubmitProposal defines an sdk.Msg type that supports submitting
    arbitrary proposal Content.
    """

    content: protobuf.Any = betterproto.message_field(1)
    initial_deposit: List[v1beta1.Coin] = betterproto.message_field(2)
    proposer: str = betterproto.string_field(3)


@dataclass
class MsgSubmitProposalResponse(betterproto.Message):
    """
    MsgSubmitProposalResponse defines the Msg/SubmitProposal response type.
    """

    proposal_id: int = betterproto.uint64_field(1)


@dataclass
class MsgVote(betterproto.Message):
    """MsgVote defines a message to cast a vote."""

    proposal_id: int = betterproto.uint64_field(1)
    voter: str = betterproto.string_field(2)
    option: "VoteOption" = betterproto.enum_field(3)


@dataclass
class MsgVoteResponse(betterproto.Message):
    """MsgVoteResponse defines the Msg/Vote response type."""

    pass


@dataclass
class MsgVoteWeighted(betterproto.Message):
    """MsgVoteWeighted defines a message to cast a vote."""

    proposal_id: int = betterproto.uint64_field(1)
    voter: str = betterproto.string_field(2)
    options: List["WeightedVoteOption"] = betterproto.message_field(3)


@dataclass
class MsgVoteWeightedResponse(betterproto.Message):
    """MsgVoteWeightedResponse defines the Msg/VoteWeighted response type."""

    pass


@dataclass
class MsgDeposit(betterproto.Message):
    """
    MsgDeposit defines a message to submit a deposit to an existing proposal.
    """

    proposal_id: int = betterproto.uint64_field(1)
    depositor: str = betterproto.string_field(2)
    amount: List[v1beta1.Coin] = betterproto.message_field(3)


@dataclass
class MsgDepositResponse(betterproto.Message):
    """MsgDepositResponse defines the Msg/Deposit response type."""

    pass


class MsgStub(betterproto.ServiceStub):
    """Msg defines the bank Msg service."""

    async def submit_proposal(
        self,
        *,
        content: Optional[protobuf.Any] = None,
        initial_deposit: List[v1beta1.Coin] = [],
        proposer: str = "",
    ) -> MsgSubmitProposalResponse:
        """
        SubmitProposal defines a method to create new proposal given a content.
        """

        request = MsgSubmitProposal()
        if content is not None:
            request.content = content
        if initial_deposit is not None:
            request.initial_deposit = initial_deposit
        request.proposer = proposer

        return await self._unary_unary(
            "/cosmos.gov.v1beta1.Msg/SubmitProposal",
            request,
            MsgSubmitProposalResponse,
        )

    async def vote(
        self, *, proposal_id: int = 0, voter: str = "", option: "VoteOption" = 0
    ) -> MsgVoteResponse:
        """Vote defines a method to add a vote on a specific proposal."""

        request = MsgVote()
        request.proposal_id = proposal_id
        request.voter = voter
        request.option = option

        return await self._unary_unary(
            "/cosmos.gov.v1beta1.Msg/Vote",
            request,
            MsgVoteResponse,
        )

    async def vote_weighted(
        self,
        *,
        proposal_id: int = 0,
        voter: str = "",
        options: List["WeightedVoteOption"] = [],
    ) -> MsgVoteWeightedResponse:
        """
        VoteWeighted defines a method to add a weighted vote on a specific
        proposal.
        """

        request = MsgVoteWeighted()
        request.proposal_id = proposal_id
        request.voter = voter
        if options is not None:
            request.options = options

        return await self._unary_unary(
            "/cosmos.gov.v1beta1.Msg/VoteWeighted",
            request,
            MsgVoteWeightedResponse,
        )

    async def deposit(
        self,
        *,
        proposal_id: int = 0,
        depositor: str = "",
        amount: List[v1beta1.Coin] = [],
    ) -> MsgDepositResponse:
        """Deposit defines a method to add deposit on a specific proposal."""

        request = MsgDeposit()
        request.proposal_id = proposal_id
        request.depositor = depositor
        if amount is not None:
            request.amount = amount

        return await self._unary_unary(
            "/cosmos.gov.v1beta1.Msg/Deposit",
            request,
            MsgDepositResponse,
        )
