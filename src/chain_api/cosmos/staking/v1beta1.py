# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/staking/v1beta1/staking.proto, cosmos/staking/v1beta1/tx.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime, timedelta
from typing import List, Optional

import betterproto
import grpclib

from .cosmos.base import v1beta1
from .google import protobuf
from .tendermint import types


class BondStatus(betterproto.Enum):
    """BondStatus is the status of a validator."""

    # UNSPECIFIED defines an invalid validator status.
    BOND_STATUS_UNSPECIFIED = 0
    # UNBONDED defines a validator that is not bonded.
    BOND_STATUS_UNBONDED = 1
    # UNBONDING defines a validator that is unbonding.
    BOND_STATUS_UNBONDING = 2
    # BONDED defines a validator that is bonded.
    BOND_STATUS_BONDED = 3


@dataclass
class HistoricalInfo(betterproto.Message):
    """
    HistoricalInfo contains header and validator information for a given block.
    It is stored as part of staking module's state, which persists the `n` most
    recent HistoricalInfo (`n` is set by the staking module's
    `historical_entries` parameter).
    """

    header: types.Header = betterproto.message_field(1)
    valset: List["Validator"] = betterproto.message_field(2)


@dataclass
class CommissionRates(betterproto.Message):
    """
    CommissionRates defines the initial commission rates to be used for
    creating a validator.
    """

    # rate is the commission rate charged to delegators, as a fraction.
    rate: str = betterproto.string_field(1)
    # max_rate defines the maximum commission rate which validator can ever
    # charge, as a fraction.
    max_rate: str = betterproto.string_field(2)
    # max_change_rate defines the maximum daily increase of the validator
    # commission, as a fraction.
    max_change_rate: str = betterproto.string_field(3)


@dataclass
class Commission(betterproto.Message):
    """Commission defines commission parameters for a given validator."""

    # commission_rates defines the initial commission rates to be used for
    # creating a validator.
    commission_rates: "CommissionRates" = betterproto.message_field(1)
    # update_time is the last time the commission rate was changed.
    update_time: datetime = betterproto.message_field(2)


@dataclass
class Description(betterproto.Message):
    """Description defines a validator description."""

    # moniker defines a human-readable name for the validator.
    moniker: str = betterproto.string_field(1)
    # identity defines an optional identity signature (ex. UPort or Keybase).
    identity: str = betterproto.string_field(2)
    # website defines an optional website link.
    website: str = betterproto.string_field(3)
    # security_contact defines an optional email for security contact.
    security_contact: str = betterproto.string_field(4)
    # details define other optional details.
    details: str = betterproto.string_field(5)


@dataclass
class Validator(betterproto.Message):
    """
    Validator defines a validator, together with the total amount of the
    Validator's bond shares and their exchange rate to coins. Slashing results
    in a decrease in the exchange rate, allowing correct calculation of future
    undelegations without iterating over delegators. When coins are delegated
    to this validator, the validator is credited with a delegation whose number
    of bond shares is based on the amount of coins delegated divided by the
    current exchange rate. Voting power can be calculated as total bonded
    shares multiplied by exchange rate.
    """

    # operator_address defines the address of the validator's operator; bech
    # encoded in JSON.
    operator_address: str = betterproto.string_field(1)
    # consensus_pubkey is the consensus public key of the validator, as a
    # Protobuf Any.
    consensus_pubkey: protobuf.Any = betterproto.message_field(2)
    # jailed defined whether the validator has been jailed from bonded status or
    # not.
    jailed: bool = betterproto.bool_field(3)
    # status is the validator status (bonded/unbonding/unbonded).
    status: "BondStatus" = betterproto.enum_field(4)
    # tokens define the delegated tokens (incl. self-delegation).
    tokens: str = betterproto.string_field(5)
    # delegator_shares defines total shares issued to a validator's delegators.
    delegator_shares: str = betterproto.string_field(6)
    # description defines the description terms for the validator.
    description: "Description" = betterproto.message_field(7)
    # unbonding_height defines, if unbonding, the height at which this validator
    # has begun unbonding.
    unbonding_height: int = betterproto.int64_field(8)
    # unbonding_time defines, if unbonding, the min time for the validator to
    # complete unbonding.
    unbonding_time: datetime = betterproto.message_field(9)
    # commission defines the commission parameters.
    commission: "Commission" = betterproto.message_field(10)
    # min_self_delegation is the validator's self declared minimum self
    # delegation.
    min_self_delegation: str = betterproto.string_field(11)


@dataclass
class ValAddresses(betterproto.Message):
    """ValAddresses defines a repeated set of validator addresses."""

    addresses: List[str] = betterproto.string_field(1)


@dataclass
class DVPair(betterproto.Message):
    """
    DVPair is struct that just has a delegator-validator pair with no other
    data. It is intended to be used as a marshalable pointer. For example, a
    DVPair can be used to construct the key to getting an UnbondingDelegation
    from state.
    """

    delegator_address: str = betterproto.string_field(1)
    validator_address: str = betterproto.string_field(2)


@dataclass
class DVPairs(betterproto.Message):
    """DVPairs defines an array of DVPair objects."""

    pairs: List["DVPair"] = betterproto.message_field(1)


@dataclass
class DVVTriplet(betterproto.Message):
    """
    DVVTriplet is struct that just has a delegator-validator-validator triplet
    with no other data. It is intended to be used as a marshalable pointer. For
    example, a DVVTriplet can be used to construct the key to getting a
    Redelegation from state.
    """

    delegator_address: str = betterproto.string_field(1)
    validator_src_address: str = betterproto.string_field(2)
    validator_dst_address: str = betterproto.string_field(3)


@dataclass
class DVVTriplets(betterproto.Message):
    """DVVTriplets defines an array of DVVTriplet objects."""

    triplets: List["DVVTriplet"] = betterproto.message_field(1)


@dataclass
class Delegation(betterproto.Message):
    """
    Delegation represents the bond with tokens held by an account. It is owned
    by one delegator, and is associated with the voting power of one validator.
    """

    # delegator_address is the bech32-encoded address of the delegator.
    delegator_address: str = betterproto.string_field(1)
    # validator_address is the bech32-encoded address of the validator.
    validator_address: str = betterproto.string_field(2)
    # shares define the delegation shares received.
    shares: str = betterproto.string_field(3)


@dataclass
class UnbondingDelegation(betterproto.Message):
    """
    UnbondingDelegation stores all of a single delegator's unbonding bonds for
    a single validator in an time-ordered list.
    """

    # delegator_address is the bech32-encoded address of the delegator.
    delegator_address: str = betterproto.string_field(1)
    # validator_address is the bech32-encoded address of the validator.
    validator_address: str = betterproto.string_field(2)
    # entries are the unbonding delegation entries.
    entries: List["UnbondingDelegationEntry"] = betterproto.message_field(3)


@dataclass
class UnbondingDelegationEntry(betterproto.Message):
    """
    UnbondingDelegationEntry defines an unbonding object with relevant
    metadata.
    """

    # creation_height is the height which the unbonding took place.
    creation_height: int = betterproto.int64_field(1)
    # completion_time is the unix time for unbonding completion.
    completion_time: datetime = betterproto.message_field(2)
    # initial_balance defines the tokens initially scheduled to receive at
    # completion.
    initial_balance: str = betterproto.string_field(3)
    # balance defines the tokens to receive at completion.
    balance: str = betterproto.string_field(4)


@dataclass
class RedelegationEntry(betterproto.Message):
    """
    RedelegationEntry defines a redelegation object with relevant metadata.
    """

    # creation_height  defines the height which the redelegation took place.
    creation_height: int = betterproto.int64_field(1)
    # completion_time defines the unix time for redelegation completion.
    completion_time: datetime = betterproto.message_field(2)
    # initial_balance defines the initial balance when redelegation started.
    initial_balance: str = betterproto.string_field(3)
    # shares_dst is the amount of destination-validator shares created by
    # redelegation.
    shares_dst: str = betterproto.string_field(4)


@dataclass
class Redelegation(betterproto.Message):
    """
    Redelegation contains the list of a particular delegator's redelegating
    bonds from a particular source validator to a particular destination
    validator.
    """

    # delegator_address is the bech32-encoded address of the delegator.
    delegator_address: str = betterproto.string_field(1)
    # validator_src_address is the validator redelegation source operator
    # address.
    validator_src_address: str = betterproto.string_field(2)
    # validator_dst_address is the validator redelegation destination operator
    # address.
    validator_dst_address: str = betterproto.string_field(3)
    # entries are the redelegation entries.
    entries: List["RedelegationEntry"] = betterproto.message_field(4)


@dataclass
class Params(betterproto.Message):
    """Params defines the parameters for the staking module."""

    # unbonding_time is the time duration of unbonding.
    unbonding_time: timedelta = betterproto.message_field(1)
    # max_validators is the maximum number of validators.
    max_validators: int = betterproto.uint32_field(2)
    # max_entries is the max entries for either unbonding delegation or
    # redelegation (per pair/trio).
    max_entries: int = betterproto.uint32_field(3)
    # historical_entries is the number of historical entries to persist.
    historical_entries: int = betterproto.uint32_field(4)
    # bond_denom defines the bondable coin denomination.
    bond_denom: str = betterproto.string_field(5)


@dataclass
class DelegationResponse(betterproto.Message):
    """
    DelegationResponse is equivalent to Delegation except that it contains a
    balance in addition to shares which is more suitable for client responses.
    """

    delegation: "Delegation" = betterproto.message_field(1)
    balance: v1beta1.Coin = betterproto.message_field(2)


@dataclass
class RedelegationEntryResponse(betterproto.Message):
    """
    RedelegationEntryResponse is equivalent to a RedelegationEntry except that
    it contains a balance in addition to shares which is more suitable for
    client responses.
    """

    redelegation_entry: "RedelegationEntry" = betterproto.message_field(1)
    balance: str = betterproto.string_field(4)


@dataclass
class RedelegationResponse(betterproto.Message):
    """
    RedelegationResponse is equivalent to a Redelegation except that its
    entries contain a balance in addition to shares which is more suitable for
    client responses.
    """

    redelegation: "Redelegation" = betterproto.message_field(1)
    entries: List["RedelegationEntryResponse"] = betterproto.message_field(2)


@dataclass
class Pool(betterproto.Message):
    """
    Pool is used for tracking bonded and not-bonded token supply of the bond
    denomination.
    """

    not_bonded_tokens: str = betterproto.string_field(1)
    bonded_tokens: str = betterproto.string_field(2)


@dataclass
class MsgCreateValidator(betterproto.Message):
    """
    MsgCreateValidator defines a SDK message for creating a new validator.
    """

    description: "Description" = betterproto.message_field(1)
    commission: "CommissionRates" = betterproto.message_field(2)
    min_self_delegation: str = betterproto.string_field(3)
    delegator_address: str = betterproto.string_field(4)
    validator_address: str = betterproto.string_field(5)
    pubkey: protobuf.Any = betterproto.message_field(6)
    value: v1beta1.Coin = betterproto.message_field(7)


@dataclass
class MsgCreateValidatorResponse(betterproto.Message):
    """
    MsgCreateValidatorResponse defines the Msg/CreateValidator response type.
    """

    pass


@dataclass
class MsgEditValidator(betterproto.Message):
    """
    MsgEditValidator defines a SDK message for editing an existing validator.
    """

    description: "Description" = betterproto.message_field(1)
    validator_address: str = betterproto.string_field(2)
    # We pass a reference to the new commission rate and min self delegation as
    # it's not mandatory to update. If not updated, the deserialized rate will be
    # zero with no way to distinguish if an update was intended. REF: #2373
    commission_rate: str = betterproto.string_field(3)
    min_self_delegation: str = betterproto.string_field(4)


@dataclass
class MsgEditValidatorResponse(betterproto.Message):
    """
    MsgEditValidatorResponse defines the Msg/EditValidator response type.
    """

    pass


@dataclass
class MsgDelegate(betterproto.Message):
    """
    MsgDelegate defines a SDK message for performing a delegation of coins from
    a delegator to a validator.
    """

    delegator_address: str = betterproto.string_field(1)
    validator_address: str = betterproto.string_field(2)
    amount: v1beta1.Coin = betterproto.message_field(3)


@dataclass
class MsgDelegateResponse(betterproto.Message):
    """MsgDelegateResponse defines the Msg/Delegate response type."""

    pass


@dataclass
class MsgBeginRedelegate(betterproto.Message):
    """
    MsgBeginRedelegate defines a SDK message for performing a redelegation of
    coins from a delegator and source validator to a destination validator.
    """

    delegator_address: str = betterproto.string_field(1)
    validator_src_address: str = betterproto.string_field(2)
    validator_dst_address: str = betterproto.string_field(3)
    amount: v1beta1.Coin = betterproto.message_field(4)


@dataclass
class MsgBeginRedelegateResponse(betterproto.Message):
    """
    MsgBeginRedelegateResponse defines the Msg/BeginRedelegate response type.
    """

    completion_time: datetime = betterproto.message_field(1)


@dataclass
class MsgUndelegate(betterproto.Message):
    """
    MsgUndelegate defines a SDK message for performing an undelegation from a
    delegate and a validator.
    """

    delegator_address: str = betterproto.string_field(1)
    validator_address: str = betterproto.string_field(2)
    amount: v1beta1.Coin = betterproto.message_field(3)


@dataclass
class MsgUndelegateResponse(betterproto.Message):
    """MsgUndelegateResponse defines the Msg/Undelegate response type."""

    completion_time: datetime = betterproto.message_field(1)


class MsgStub(betterproto.ServiceStub):
    """Msg defines the staking Msg service."""

    async def create_validator(
        self,
        *,
        description: Optional["Description"] = None,
        commission: Optional["CommissionRates"] = None,
        min_self_delegation: str = "",
        delegator_address: str = "",
        validator_address: str = "",
        pubkey: Optional[protobuf.Any] = None,
        value: Optional[v1beta1.Coin] = None,
    ) -> MsgCreateValidatorResponse:
        """CreateValidator defines a method for creating a new validator."""

        request = MsgCreateValidator()
        if description is not None:
            request.description = description
        if commission is not None:
            request.commission = commission
        request.min_self_delegation = min_self_delegation
        request.delegator_address = delegator_address
        request.validator_address = validator_address
        if pubkey is not None:
            request.pubkey = pubkey
        if value is not None:
            request.value = value

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Msg/CreateValidator",
            request,
            MsgCreateValidatorResponse,
        )

    async def edit_validator(
        self,
        *,
        description: Optional["Description"] = None,
        validator_address: str = "",
        commission_rate: str = "",
        min_self_delegation: str = "",
    ) -> MsgEditValidatorResponse:
        """
        EditValidator defines a method for editing an existing validator.
        """

        request = MsgEditValidator()
        if description is not None:
            request.description = description
        request.validator_address = validator_address
        request.commission_rate = commission_rate
        request.min_self_delegation = min_self_delegation

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Msg/EditValidator",
            request,
            MsgEditValidatorResponse,
        )

    async def delegate(
        self,
        *,
        delegator_address: str = "",
        validator_address: str = "",
        amount: Optional[v1beta1.Coin] = None,
    ) -> MsgDelegateResponse:
        """
        Delegate defines a method for performing a delegation of coins from a
        delegator to a validator.
        """

        request = MsgDelegate()
        request.delegator_address = delegator_address
        request.validator_address = validator_address
        if amount is not None:
            request.amount = amount

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Msg/Delegate",
            request,
            MsgDelegateResponse,
        )

    async def begin_redelegate(
        self,
        *,
        delegator_address: str = "",
        validator_src_address: str = "",
        validator_dst_address: str = "",
        amount: Optional[v1beta1.Coin] = None,
    ) -> MsgBeginRedelegateResponse:
        """
        BeginRedelegate defines a method for performing a redelegation of coins
        from a delegator and source validator to a destination validator.
        """

        request = MsgBeginRedelegate()
        request.delegator_address = delegator_address
        request.validator_src_address = validator_src_address
        request.validator_dst_address = validator_dst_address
        if amount is not None:
            request.amount = amount

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Msg/BeginRedelegate",
            request,
            MsgBeginRedelegateResponse,
        )

    async def undelegate(
        self,
        *,
        delegator_address: str = "",
        validator_address: str = "",
        amount: Optional[v1beta1.Coin] = None,
    ) -> MsgUndelegateResponse:
        """
        Undelegate defines a method for performing an undelegation from a
        delegate and a validator.
        """

        request = MsgUndelegate()
        request.delegator_address = delegator_address
        request.validator_address = validator_address
        if amount is not None:
            request.amount = amount

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Msg/Undelegate",
            request,
            MsgUndelegateResponse,
        )
