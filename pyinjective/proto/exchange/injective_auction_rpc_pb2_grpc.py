# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from pyinjective.proto.exchange import injective_auction_rpc_pb2 as exchange_dot_injective__auction__rpc__pb2


class InjectiveAuctionRPCStub(object):
    """InjectiveAuctionRPC defines gRPC API of the Auction API.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AuctionEndpoint = channel.unary_unary(
                '/injective_auction_rpc.InjectiveAuctionRPC/AuctionEndpoint',
                request_serializer=exchange_dot_injective__auction__rpc__pb2.AuctionEndpointRequest.SerializeToString,
                response_deserializer=exchange_dot_injective__auction__rpc__pb2.AuctionEndpointResponse.FromString,
                _registered_method=True)
        self.Auctions = channel.unary_unary(
                '/injective_auction_rpc.InjectiveAuctionRPC/Auctions',
                request_serializer=exchange_dot_injective__auction__rpc__pb2.AuctionsRequest.SerializeToString,
                response_deserializer=exchange_dot_injective__auction__rpc__pb2.AuctionsResponse.FromString,
                _registered_method=True)
        self.AuctionsHistoryV2 = channel.unary_unary(
                '/injective_auction_rpc.InjectiveAuctionRPC/AuctionsHistoryV2',
                request_serializer=exchange_dot_injective__auction__rpc__pb2.AuctionsHistoryV2Request.SerializeToString,
                response_deserializer=exchange_dot_injective__auction__rpc__pb2.AuctionsHistoryV2Response.FromString,
                _registered_method=True)
        self.AuctionV2 = channel.unary_unary(
                '/injective_auction_rpc.InjectiveAuctionRPC/AuctionV2',
                request_serializer=exchange_dot_injective__auction__rpc__pb2.AuctionV2Request.SerializeToString,
                response_deserializer=exchange_dot_injective__auction__rpc__pb2.AuctionV2Response.FromString,
                _registered_method=True)
        self.AccountAuctionsV2 = channel.unary_unary(
                '/injective_auction_rpc.InjectiveAuctionRPC/AccountAuctionsV2',
                request_serializer=exchange_dot_injective__auction__rpc__pb2.AccountAuctionsV2Request.SerializeToString,
                response_deserializer=exchange_dot_injective__auction__rpc__pb2.AccountAuctionsV2Response.FromString,
                _registered_method=True)
        self.StreamBids = channel.unary_stream(
                '/injective_auction_rpc.InjectiveAuctionRPC/StreamBids',
                request_serializer=exchange_dot_injective__auction__rpc__pb2.StreamBidsRequest.SerializeToString,
                response_deserializer=exchange_dot_injective__auction__rpc__pb2.StreamBidsResponse.FromString,
                _registered_method=True)
        self.InjBurntEndpoint = channel.unary_unary(
                '/injective_auction_rpc.InjectiveAuctionRPC/InjBurntEndpoint',
                request_serializer=exchange_dot_injective__auction__rpc__pb2.InjBurntEndpointRequest.SerializeToString,
                response_deserializer=exchange_dot_injective__auction__rpc__pb2.InjBurntEndpointResponse.FromString,
                _registered_method=True)


class InjectiveAuctionRPCServicer(object):
    """InjectiveAuctionRPC defines gRPC API of the Auction API.
    """

    def AuctionEndpoint(self, request, context):
        """Provide historical auction info for a given auction
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Auctions(self, request, context):
        """Provide the historical auctions info
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AuctionsHistoryV2(self, request, context):
        """Provide the historical auctions info
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AuctionV2(self, request, context):
        """Provide historical auction info for a given auction
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AccountAuctionsV2(self, request, context):
        """Provide the historical auctions info for a given account
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamBids(self, request, context):
        """StreamBids streams new bids of an auction.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InjBurntEndpoint(self, request, context):
        """InjBurntEndpoint returns the total amount of INJ burnt in auctions.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InjectiveAuctionRPCServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AuctionEndpoint': grpc.unary_unary_rpc_method_handler(
                    servicer.AuctionEndpoint,
                    request_deserializer=exchange_dot_injective__auction__rpc__pb2.AuctionEndpointRequest.FromString,
                    response_serializer=exchange_dot_injective__auction__rpc__pb2.AuctionEndpointResponse.SerializeToString,
            ),
            'Auctions': grpc.unary_unary_rpc_method_handler(
                    servicer.Auctions,
                    request_deserializer=exchange_dot_injective__auction__rpc__pb2.AuctionsRequest.FromString,
                    response_serializer=exchange_dot_injective__auction__rpc__pb2.AuctionsResponse.SerializeToString,
            ),
            'AuctionsHistoryV2': grpc.unary_unary_rpc_method_handler(
                    servicer.AuctionsHistoryV2,
                    request_deserializer=exchange_dot_injective__auction__rpc__pb2.AuctionsHistoryV2Request.FromString,
                    response_serializer=exchange_dot_injective__auction__rpc__pb2.AuctionsHistoryV2Response.SerializeToString,
            ),
            'AuctionV2': grpc.unary_unary_rpc_method_handler(
                    servicer.AuctionV2,
                    request_deserializer=exchange_dot_injective__auction__rpc__pb2.AuctionV2Request.FromString,
                    response_serializer=exchange_dot_injective__auction__rpc__pb2.AuctionV2Response.SerializeToString,
            ),
            'AccountAuctionsV2': grpc.unary_unary_rpc_method_handler(
                    servicer.AccountAuctionsV2,
                    request_deserializer=exchange_dot_injective__auction__rpc__pb2.AccountAuctionsV2Request.FromString,
                    response_serializer=exchange_dot_injective__auction__rpc__pb2.AccountAuctionsV2Response.SerializeToString,
            ),
            'StreamBids': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamBids,
                    request_deserializer=exchange_dot_injective__auction__rpc__pb2.StreamBidsRequest.FromString,
                    response_serializer=exchange_dot_injective__auction__rpc__pb2.StreamBidsResponse.SerializeToString,
            ),
            'InjBurntEndpoint': grpc.unary_unary_rpc_method_handler(
                    servicer.InjBurntEndpoint,
                    request_deserializer=exchange_dot_injective__auction__rpc__pb2.InjBurntEndpointRequest.FromString,
                    response_serializer=exchange_dot_injective__auction__rpc__pb2.InjBurntEndpointResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'injective_auction_rpc.InjectiveAuctionRPC', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('injective_auction_rpc.InjectiveAuctionRPC', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class InjectiveAuctionRPC(object):
    """InjectiveAuctionRPC defines gRPC API of the Auction API.
    """

    @staticmethod
    def AuctionEndpoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/injective_auction_rpc.InjectiveAuctionRPC/AuctionEndpoint',
            exchange_dot_injective__auction__rpc__pb2.AuctionEndpointRequest.SerializeToString,
            exchange_dot_injective__auction__rpc__pb2.AuctionEndpointResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Auctions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/injective_auction_rpc.InjectiveAuctionRPC/Auctions',
            exchange_dot_injective__auction__rpc__pb2.AuctionsRequest.SerializeToString,
            exchange_dot_injective__auction__rpc__pb2.AuctionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AuctionsHistoryV2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/injective_auction_rpc.InjectiveAuctionRPC/AuctionsHistoryV2',
            exchange_dot_injective__auction__rpc__pb2.AuctionsHistoryV2Request.SerializeToString,
            exchange_dot_injective__auction__rpc__pb2.AuctionsHistoryV2Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AuctionV2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/injective_auction_rpc.InjectiveAuctionRPC/AuctionV2',
            exchange_dot_injective__auction__rpc__pb2.AuctionV2Request.SerializeToString,
            exchange_dot_injective__auction__rpc__pb2.AuctionV2Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AccountAuctionsV2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/injective_auction_rpc.InjectiveAuctionRPC/AccountAuctionsV2',
            exchange_dot_injective__auction__rpc__pb2.AccountAuctionsV2Request.SerializeToString,
            exchange_dot_injective__auction__rpc__pb2.AccountAuctionsV2Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamBids(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/injective_auction_rpc.InjectiveAuctionRPC/StreamBids',
            exchange_dot_injective__auction__rpc__pb2.StreamBidsRequest.SerializeToString,
            exchange_dot_injective__auction__rpc__pb2.StreamBidsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def InjBurntEndpoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/injective_auction_rpc.InjectiveAuctionRPC/InjBurntEndpoint',
            exchange_dot_injective__auction__rpc__pb2.InjBurntEndpointRequest.SerializeToString,
            exchange_dot_injective__auction__rpc__pb2.InjBurntEndpointResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
