# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from hyperlane.warp.v1 import tx_pb2 as hyperlane_dot_warp_dot_v1_dot_tx__pb2


class MsgStub(object):
    """Msg defines the module Msg service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateCollateralToken = channel.unary_unary(
                '/hyperlane.warp.v1.Msg/CreateCollateralToken',
                request_serializer=hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgCreateCollateralToken.SerializeToString,
                response_deserializer=hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgCreateCollateralTokenResponse.FromString,
                _registered_method=True)
        self.CreateSyntheticToken = channel.unary_unary(
                '/hyperlane.warp.v1.Msg/CreateSyntheticToken',
                request_serializer=hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgCreateSyntheticToken.SerializeToString,
                response_deserializer=hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgCreateSyntheticTokenResponse.FromString,
                _registered_method=True)
        self.CreateNativeSyntheticToken = channel.unary_unary(
                '/hyperlane.warp.v1.Msg/CreateNativeSyntheticToken',
                request_serializer=hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgCreateNativeSyntheticToken.SerializeToString,
                response_deserializer=hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgCreateSyntheticTokenResponse.FromString,
                _registered_method=True)
        self.SetToken = channel.unary_unary(
                '/hyperlane.warp.v1.Msg/SetToken',
                request_serializer=hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgSetToken.SerializeToString,
                response_deserializer=hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgSetTokenResponse.FromString,
                _registered_method=True)
        self.EnrollRemoteRouter = channel.unary_unary(
                '/hyperlane.warp.v1.Msg/EnrollRemoteRouter',
                request_serializer=hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgEnrollRemoteRouter.SerializeToString,
                response_deserializer=hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgEnrollRemoteRouterResponse.FromString,
                _registered_method=True)
        self.UnrollRemoteRouter = channel.unary_unary(
                '/hyperlane.warp.v1.Msg/UnrollRemoteRouter',
                request_serializer=hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgUnrollRemoteRouter.SerializeToString,
                response_deserializer=hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgUnrollRemoteRouterResponse.FromString,
                _registered_method=True)
        self.RemoteTransfer = channel.unary_unary(
                '/hyperlane.warp.v1.Msg/RemoteTransfer',
                request_serializer=hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgRemoteTransfer.SerializeToString,
                response_deserializer=hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgRemoteTransferResponse.FromString,
                _registered_method=True)


class MsgServicer(object):
    """Msg defines the module Msg service.
    """

    def CreateCollateralToken(self, request, context):
        """CreateCollateralToken ...
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateSyntheticToken(self, request, context):
        """CreateSyntheticToken ...
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateNativeSyntheticToken(self, request, context):
        """CreateNativeSyntheticToken ...
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetToken(self, request, context):
        """SetToken ...
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnrollRemoteRouter(self, request, context):
        """EnrollRemoteRouter ...
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnrollRemoteRouter(self, request, context):
        """UnrollRemoteRouter ...
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoteTransfer(self, request, context):
        """RemoteTransfer ...
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MsgServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateCollateralToken': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCollateralToken,
                    request_deserializer=hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgCreateCollateralToken.FromString,
                    response_serializer=hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgCreateCollateralTokenResponse.SerializeToString,
            ),
            'CreateSyntheticToken': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSyntheticToken,
                    request_deserializer=hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgCreateSyntheticToken.FromString,
                    response_serializer=hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgCreateSyntheticTokenResponse.SerializeToString,
            ),
            'CreateNativeSyntheticToken': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateNativeSyntheticToken,
                    request_deserializer=hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgCreateNativeSyntheticToken.FromString,
                    response_serializer=hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgCreateSyntheticTokenResponse.SerializeToString,
            ),
            'SetToken': grpc.unary_unary_rpc_method_handler(
                    servicer.SetToken,
                    request_deserializer=hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgSetToken.FromString,
                    response_serializer=hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgSetTokenResponse.SerializeToString,
            ),
            'EnrollRemoteRouter': grpc.unary_unary_rpc_method_handler(
                    servicer.EnrollRemoteRouter,
                    request_deserializer=hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgEnrollRemoteRouter.FromString,
                    response_serializer=hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgEnrollRemoteRouterResponse.SerializeToString,
            ),
            'UnrollRemoteRouter': grpc.unary_unary_rpc_method_handler(
                    servicer.UnrollRemoteRouter,
                    request_deserializer=hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgUnrollRemoteRouter.FromString,
                    response_serializer=hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgUnrollRemoteRouterResponse.SerializeToString,
            ),
            'RemoteTransfer': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoteTransfer,
                    request_deserializer=hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgRemoteTransfer.FromString,
                    response_serializer=hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgRemoteTransferResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'hyperlane.warp.v1.Msg', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('hyperlane.warp.v1.Msg', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Msg(object):
    """Msg defines the module Msg service.
    """

    @staticmethod
    def CreateCollateralToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyperlane.warp.v1.Msg/CreateCollateralToken',
            hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgCreateCollateralToken.SerializeToString,
            hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgCreateCollateralTokenResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateSyntheticToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyperlane.warp.v1.Msg/CreateSyntheticToken',
            hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgCreateSyntheticToken.SerializeToString,
            hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgCreateSyntheticTokenResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateNativeSyntheticToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyperlane.warp.v1.Msg/CreateNativeSyntheticToken',
            hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgCreateNativeSyntheticToken.SerializeToString,
            hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgCreateSyntheticTokenResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyperlane.warp.v1.Msg/SetToken',
            hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgSetToken.SerializeToString,
            hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgSetTokenResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EnrollRemoteRouter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyperlane.warp.v1.Msg/EnrollRemoteRouter',
            hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgEnrollRemoteRouter.SerializeToString,
            hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgEnrollRemoteRouterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnrollRemoteRouter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyperlane.warp.v1.Msg/UnrollRemoteRouter',
            hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgUnrollRemoteRouter.SerializeToString,
            hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgUnrollRemoteRouterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoteTransfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyperlane.warp.v1.Msg/RemoteTransfer',
            hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgRemoteTransfer.SerializeToString,
            hyperlane_dot_warp_dot_v1_dot_tx__pb2.MsgRemoteTransferResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
