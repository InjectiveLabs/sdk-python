# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from hyperlane.warp.v1 import query_pb2 as hyperlane_dot_warp_dot_v1_dot_query__pb2


class QueryStub(object):
    """Query defines the module Query service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Tokens = channel.unary_unary(
                '/hyperlane.warp.v1.Query/Tokens',
                request_serializer=hyperlane_dot_warp_dot_v1_dot_query__pb2.QueryTokensRequest.SerializeToString,
                response_deserializer=hyperlane_dot_warp_dot_v1_dot_query__pb2.QueryTokensResponse.FromString,
                _registered_method=True)
        self.Token = channel.unary_unary(
                '/hyperlane.warp.v1.Query/Token',
                request_serializer=hyperlane_dot_warp_dot_v1_dot_query__pb2.QueryTokenRequest.SerializeToString,
                response_deserializer=hyperlane_dot_warp_dot_v1_dot_query__pb2.QueryTokenResponse.FromString,
                _registered_method=True)
        self.BridgedSupply = channel.unary_unary(
                '/hyperlane.warp.v1.Query/BridgedSupply',
                request_serializer=hyperlane_dot_warp_dot_v1_dot_query__pb2.QueryBridgedSupplyRequest.SerializeToString,
                response_deserializer=hyperlane_dot_warp_dot_v1_dot_query__pb2.QueryBridgedSupplyResponse.FromString,
                _registered_method=True)
        self.RemoteRouters = channel.unary_unary(
                '/hyperlane.warp.v1.Query/RemoteRouters',
                request_serializer=hyperlane_dot_warp_dot_v1_dot_query__pb2.QueryRemoteRoutersRequest.SerializeToString,
                response_deserializer=hyperlane_dot_warp_dot_v1_dot_query__pb2.QueryRemoteRoutersResponse.FromString,
                _registered_method=True)
        self.QuoteRemoteTransfer = channel.unary_unary(
                '/hyperlane.warp.v1.Query/QuoteRemoteTransfer',
                request_serializer=hyperlane_dot_warp_dot_v1_dot_query__pb2.QueryQuoteRemoteTransferRequest.SerializeToString,
                response_deserializer=hyperlane_dot_warp_dot_v1_dot_query__pb2.QueryQuoteRemoteTransferResponse.FromString,
                _registered_method=True)


class QueryServicer(object):
    """Query defines the module Query service.
    """

    def Tokens(self, request, context):
        """Tokens ...
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Token(self, request, context):
        """Token ...
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BridgedSupply(self, request, context):
        """BridgedSupply ...
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoteRouters(self, request, context):
        """RemoteRouters ...
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QuoteRemoteTransfer(self, request, context):
        """QuoteRemoteTransfer ...
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Tokens': grpc.unary_unary_rpc_method_handler(
                    servicer.Tokens,
                    request_deserializer=hyperlane_dot_warp_dot_v1_dot_query__pb2.QueryTokensRequest.FromString,
                    response_serializer=hyperlane_dot_warp_dot_v1_dot_query__pb2.QueryTokensResponse.SerializeToString,
            ),
            'Token': grpc.unary_unary_rpc_method_handler(
                    servicer.Token,
                    request_deserializer=hyperlane_dot_warp_dot_v1_dot_query__pb2.QueryTokenRequest.FromString,
                    response_serializer=hyperlane_dot_warp_dot_v1_dot_query__pb2.QueryTokenResponse.SerializeToString,
            ),
            'BridgedSupply': grpc.unary_unary_rpc_method_handler(
                    servicer.BridgedSupply,
                    request_deserializer=hyperlane_dot_warp_dot_v1_dot_query__pb2.QueryBridgedSupplyRequest.FromString,
                    response_serializer=hyperlane_dot_warp_dot_v1_dot_query__pb2.QueryBridgedSupplyResponse.SerializeToString,
            ),
            'RemoteRouters': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoteRouters,
                    request_deserializer=hyperlane_dot_warp_dot_v1_dot_query__pb2.QueryRemoteRoutersRequest.FromString,
                    response_serializer=hyperlane_dot_warp_dot_v1_dot_query__pb2.QueryRemoteRoutersResponse.SerializeToString,
            ),
            'QuoteRemoteTransfer': grpc.unary_unary_rpc_method_handler(
                    servicer.QuoteRemoteTransfer,
                    request_deserializer=hyperlane_dot_warp_dot_v1_dot_query__pb2.QueryQuoteRemoteTransferRequest.FromString,
                    response_serializer=hyperlane_dot_warp_dot_v1_dot_query__pb2.QueryQuoteRemoteTransferResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'hyperlane.warp.v1.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('hyperlane.warp.v1.Query', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query defines the module Query service.
    """

    @staticmethod
    def Tokens(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyperlane.warp.v1.Query/Tokens',
            hyperlane_dot_warp_dot_v1_dot_query__pb2.QueryTokensRequest.SerializeToString,
            hyperlane_dot_warp_dot_v1_dot_query__pb2.QueryTokensResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Token(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyperlane.warp.v1.Query/Token',
            hyperlane_dot_warp_dot_v1_dot_query__pb2.QueryTokenRequest.SerializeToString,
            hyperlane_dot_warp_dot_v1_dot_query__pb2.QueryTokenResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BridgedSupply(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyperlane.warp.v1.Query/BridgedSupply',
            hyperlane_dot_warp_dot_v1_dot_query__pb2.QueryBridgedSupplyRequest.SerializeToString,
            hyperlane_dot_warp_dot_v1_dot_query__pb2.QueryBridgedSupplyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoteRouters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyperlane.warp.v1.Query/RemoteRouters',
            hyperlane_dot_warp_dot_v1_dot_query__pb2.QueryRemoteRoutersRequest.SerializeToString,
            hyperlane_dot_warp_dot_v1_dot_query__pb2.QueryRemoteRoutersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QuoteRemoteTransfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyperlane.warp.v1.Query/QuoteRemoteTransfer',
            hyperlane_dot_warp_dot_v1_dot_query__pb2.QueryQuoteRemoteTransferRequest.SerializeToString,
            hyperlane_dot_warp_dot_v1_dot_query__pb2.QueryQuoteRemoteTransferResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
